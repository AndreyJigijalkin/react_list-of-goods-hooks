{"version":3,"sources":["App.tsx","GoodsList.tsx","index.tsx"],"names":["SortType","GoodsList","goods","map","good","goodsFromServer","App","useState","isReversed","setReversity","NONE","sortType","setSortType","visibleGoods","newGoods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","reverse","changeSorting","className","type","classNames","onClick","value","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0ECbQC,EAA6B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3C,OACE,6BACGA,EAAMC,KAAI,SAACC,GAAD,OACT,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,SDLFC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGL,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAmCE,IAAMM,EAAgB,WAC3B,MAAmCC,oBAAS,GAA5C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASP,EAASU,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAjCR,SACEX,EACAS,EACAH,GAEA,IAAMM,EAAQ,YAAOZ,GAqBrB,OAnBIS,IAAaX,EAASU,MACxBI,EAASC,MAAK,SAACC,EAAOC,GACpB,OAAQN,GACN,KAAKX,EAASkB,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKjB,EAASoB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXb,GACFM,EAASQ,UAGJR,EAOcS,CAAclB,EAAiBM,EAAUH,GAW9D,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CACE,WAAYf,IAAaX,EAASkB,WAGtCS,QAhBc,kBAAMf,EAAYZ,EAASkB,WAO3C,iCAcA,wBACEO,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CACE,WAAYf,IAAaX,EAASoB,SAGtCO,QA7BW,kBAAMf,EAAYZ,EAASoB,SAoBxC,4BAcA,wBACEK,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CACE,YAA2B,IAAflB,IAGhBmB,QA1CY,kBAAMlB,GAAa,SAAAmB,GAAK,OAAKA,MAiC3C,sBAcEjB,IAAaX,EAASU,OAAuB,IAAfF,IAC9B,wBACEiB,KAAK,SACLD,UAAU,4BACVG,QA1DI,WACZf,EAAYZ,EAASU,MACrBD,GAAa,IAqDP,sBAUJ,6BACE,cAAC,EAAD,CAAWP,MAAOW,UE3H1BgB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c37be925.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { GoodsList } from './GoodsList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nfunction changeSorting(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  const newGoods = [...goods];\n\n  if (sortType !== SortType.NONE) {\n    newGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SortType.LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    newGoods.reverse();\n  }\n\n  return newGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReversity] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const visibleGoods = changeSorting(goodsFromServer, sortType, isReversed);\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n    setReversity(false);\n  };\n\n  const aplabeticSort = () => setSortType(SortType.ALPHABET);\n  const lengthSort = () => setSortType(SortType.LENGTH);\n  const listReverse = () => setReversity(value => !value);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            {\n              'is-light': sortType !== SortType.ALPHABET,\n            },\n          )}\n          onClick={aplabeticSort}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={lengthSort}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            {\n              'is-light': isReversed === false,\n            },\n          )}\n          onClick={listReverse}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed === true) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <GoodsList goods={visibleGoods} />\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\n\n type Props = {\n   goods: string[];\n };\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => {\n  return (\n    <ul>\n      {goods.map((good) => (\n        <li\n          key={good}\n          data-cy=\"Good\"\n        >\n          {good}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}